import { TO<myClass> } from 'src/app/models/to/TO<myclass>';

export class <myClass>{
    private aTO<myClass>:TO<myClass>[]=[];
    private dataStorage:any=null;

    constructor ( dataStorage?:any ) {
        if ( dataStorage ) {
            this.dataStorage = dataStorage;
            this.getAll();
        }
    }

    private addFromArray(itemDataStorage:any) {
        let oTO<myClass> = new TO<myClass>(itemDataStorage);
        this.aTO<myClass>.push(oTO<myClass>);
    }

    getAll(dataStorage?:any) {
        this.aTO<myClass> = [];  
        if ( dataStorage )      
            this.dataStorage = dataStorage
        for ( let item of this.dataStorage ) 
            this.addFromArray(item);
    }

    getATO<myClass>():TO<myClass>[] {
        return this.aTO<myClass>;
    }

    setATO<myClass>(value:TO<myClass>[]) {
        this.aTO<myClass> = value;
    }

    add(oTO<myClass>:TO<myClass>) {
        this.aTO<myClass>.push(oTO<myClass>);
    }

    remove(id:number):boolean {
        let index = this.aTO<myClass>.findIndex(oTO<myClass> => {
            return (oTO<myClass>.getId() === id ) ;
        })
        if ( index == -1 )
            return false;
        this.aTO<myClass>.splice(index, 1);
        return true;
    }

    update(oTO<myClass>:TO<myClass>):boolean {
        let index = this.aTO<myClass>.findIndex(item => {
            return (oTO<myClass>.getId() === item.getId() ) ;
        })
        if ( index == -1 )
            return false;
        this.aTO<myClass>.splice(index, 1, oTO<myClass>);
        return true;
    }



    /*--------------------------------------------------------------------
                        Funcionalidad adicional
    ----------------------------------------------------------------------*/
    
}